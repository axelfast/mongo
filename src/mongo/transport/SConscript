# -*- mode: python -*-

Import('env')

env = env.Clone()

env.Library(
    target='transport_layer_common',
    source=[
        'service_entry_point_utils.cpp',
        'session.cpp',
        'transport_layer.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/service_context',
    ],
)

env.Library(
    target='transport_layer_mock',
    source=[
        'transport_layer_mock.cpp',
    ],
    LIBDEPS=[
        'transport_layer_common',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/util/net/network',
    ],
)

tlEnv = env.Clone()
tlEnv.InjectThirdParty(libraries=['asio'])

tlEnv.Library(
    target='transport_layer_manager',
    source=[
        'transport_layer_manager.cpp',
    ],
    LIBDEPS=[
        'transport_layer',
    ],
    LIBDEPS_PRIVATE=[
        'service_executor',
        '$BUILD_DIR/third_party/shim_asio',
    ],
)

tlEnv.Library(
    target='transport_layer',
    source=[
        'transport_layer_asio.cpp',
    ],
    LIBDEPS=[
        'transport_layer_common',
        '$BUILD_DIR/monger/base/system_error',
        '$BUILD_DIR/monger/db/auth/authentication_restriction',
        '$BUILD_DIR/monger/db/server_options_core',
        '$BUILD_DIR/monger/db/service_context',
        '$BUILD_DIR/monger/db/stats/counters',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/util/net/ssl_manager',
        '$BUILD_DIR/third_party/shim_asio',
    ],
)

# This library will initialize an egress transport layer in a monger initializer
# for C++ tests that require networking.
env.Library(
    target='transport_layer_egress_init',
    source=[
        'transport_layer_egress_init.cpp',
    ],
    LIBDEPS_PRIVATE=[
        'transport_layer',
    ]
)

tlEnv.Library(
    target='service_executor',
    source=[
        'service_executor_adaptive.cpp',
        'service_executor_reserved.cpp',
        'service_executor_synchronous.cpp',
        env.Idlc('service_executor.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/db/service_context',
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/monger/idl/server_parameter",
        "$BUILD_DIR/monger/util/processinfo",
        '$BUILD_DIR/third_party/shim_asio',
        'transport_layer_common',
    ],
)

env.Library(
    target='service_entry_point',
    source=[
        'service_entry_point_impl.cpp',
        'service_state_machine.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/db/auth/authentication_restriction',
        '$BUILD_DIR/monger/db/server_options_core',
        '$BUILD_DIR/monger/db/service_context',
        '$BUILD_DIR/monger/db/stats/counters',
        '$BUILD_DIR/monger/rpc/protocol',
        '$BUILD_DIR/monger/util/processinfo',
        'service_executor',
        'transport_layer_common',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/db/traffic_recorder',
        '$BUILD_DIR/monger/transport/message_compressor',
        '$BUILD_DIR/monger/util/net/ssl_manager',
    ],
)

zlibEnv = env.Clone()
zlibEnv.InjectThirdParty(libraries=['zlib', 'zstd', 'snappy'])
zlibEnv.Library(
    target='message_compressor',
    source=[
        'message_compressor_manager.cpp',
        'message_compressor_metrics.cpp',
        'message_compressor_registry.cpp',
        'message_compressor_snappy.cpp',
        'message_compressor_zlib.cpp',
        'message_compressor_zstd.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/util/options_parser/options_parser',
        '$BUILD_DIR/third_party/shim_snappy',
        '$BUILD_DIR/third_party/shim_zlib',
        '$BUILD_DIR/third_party/shim_zstd',
    ]
)

env.Library(
    target='message_compressor_options_client',
    source=[
        env.Idlc('message_compressor_options_client.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        'message_compressor',
    ],
)

env.Library(
    target='message_compressor_options_server',
    source=[
        env.Idlc('message_compressor_options_server.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        'message_compressor',
    ],
)

tlEnv.CppUnitTest(
    target='transport_test',
    source=[
        'message_compressor_manager_test.cpp',
        'message_compressor_registry_test.cpp',
        'transport_layer_asio_test.cpp',
        'service_executor_test.cpp',
        # Disable this test until SERVER-30475 and associated build failure tickets are resolved.
        # 'service_executor_adaptive_test.cpp',
        'max_conns_override_test.cpp',
        'service_state_machine_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/dbmessage',
        '$BUILD_DIR/monger/db/service_context',
        '$BUILD_DIR/monger/rpc/protocol',
        '$BUILD_DIR/monger/rpc/rpc',
        '$BUILD_DIR/monger/unittest/unittest',
        '$BUILD_DIR/monger/util/clock_source_mock',
        '$BUILD_DIR/monger/util/net/socket',
        '$BUILD_DIR/third_party/shim_asio',
        'message_compressor',
        'message_compressor_options_server',
        'service_entry_point',
        'service_executor',
        'transport_layer',
        'transport_layer_common',
        'transport_layer_mock',
    ],
)

tlEnv.CppIntegrationTest(
    target='transport_integration_test',
    source=[
        'transport_layer_asio_integration_test.cpp',
    ],
    LIBDEPS=[
        'transport_layer_egress_init',
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/client/async_client',
        '$BUILD_DIR/monger/executor/task_executor_interface',
        '$BUILD_DIR/monger/util/net/network',
        '$BUILD_DIR/monger/util/version_impl',
        '$BUILD_DIR/third_party/shim_asio',
    ],
)
