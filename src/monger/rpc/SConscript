# -*- mode: python -*-

Import("env")
Import("wiredtiger")
Import("get_option")

env = env.Clone()

env.Library(
    target=[
        'command_status',
    ],
    source=[
        'get_status_from_command_result.cpp',
        'write_concern_error_detail.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/bson/util/bson_extract',
        '$BUILD_DIR/monger/db/common',
    ],
)

protoEnv = env.Clone()
if wiredtiger:
    protoEnv.InjectThirdParty(libraries=['wiredtiger'])

protoEnv.Library(
    target=[
        'protocol',
    ],
    source=[
        'message.cpp',
        'op_msg.cpp',
        'protocol.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/wire_version',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/bson/util/bson_extract',
        '$BUILD_DIR/monger/db/bson/dotted_path_support',
        '$BUILD_DIR/monger/db/server_options_core',
        '$BUILD_DIR/third_party/wiredtiger/wiredtiger_checksum' if wiredtiger else [],
    ],
)

env.Library(
    target=[
        'rpc',
    ],
    source=[
        'factory.cpp',
        'object_check.cpp',
        'legacy_request.cpp',
        'legacy_request_builder.cpp',
        'legacy_reply.cpp',
        'legacy_reply_builder.cpp',
        'reply_builder_interface.cpp',
        env.Idlc('object_check.idl')[0],
    ],
    LIBDEPS=[
        'metadata',
        'protocol',
        '$BUILD_DIR/monger/util/net/network',
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/dbmessage',
        '$BUILD_DIR/monger/db/server_options_core',
        '$BUILD_DIR/monger/s/common_s',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/idl/server_parameter',
    ],
)

env.Library(
    target=[
        'metadata',
    ],
    source=[
        'metadata.cpp',
        'metadata/config_server_metadata.cpp',
        'metadata/egress_metadata_hook_list.cpp',
        'metadata/logical_time_metadata.cpp',
        'metadata/sharding_metadata.cpp',
        'metadata/repl_set_metadata.cpp',
        'metadata/oplog_query_metadata.cpp',
        'metadata/tracking_metadata.cpp',
    ],
    LIBDEPS=[
        'client_metadata',
        'metadata_impersonated_user',
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/bson/util/bson_extract',
        '$BUILD_DIR/monger/client/read_preference',
        '$BUILD_DIR/monger/db/logical_time_validator',
        '$BUILD_DIR/monger/db/repl/optime',
        '$BUILD_DIR/monger/db/signed_logical_time',
    ],
)

env.Library(
    target=[
        'metadata_impersonated_user'
    ],
    source=[
        'metadata/impersonated_user_metadata.cpp',
        env.Idlc('metadata/impersonated_user_metadata.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/service_context',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/db/auth/auth',
        '$BUILD_DIR/monger/db/server_options',
    ],
)


env.Library(
    target='client_metadata',
    source=[
        'metadata/client_metadata.cpp',
        'metadata/client_metadata_ismaster.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/service_context',
        '$BUILD_DIR/monger/s/is_mongers',
        '$BUILD_DIR/monger/transport/transport_layer_common',
        "$BUILD_DIR/monger/util/concurrency/spin_lock",
        '$BUILD_DIR/monger/util/net/network',
        "$BUILD_DIR/monger/util/processinfo",
    ],
)

env.CppUnitTest(
    target='rpc_test',
    source=[
        'get_status_from_command_result_test.cpp',
        'legacy_request_test.cpp',
        'metadata/client_metadata_test.cpp',
        'metadata/config_server_metadata_test.cpp',
        'metadata/egress_metadata_hook_list_test.cpp',
        'metadata/logical_time_metadata_test.cpp',
        'metadata/oplog_query_metadata_test.cpp',
        'metadata/repl_set_metadata_test.cpp',
        'metadata/sharding_metadata_test.cpp',
        'metadata/tracking_metadata_test.cpp',
        'metadata_test.cpp',
        'object_check_test.cpp',
        'op_msg_test.cpp',
        'protocol_test.cpp',
        'reply_builder_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/client/clientdriver_minimal',
        '$BUILD_DIR/third_party/wiredtiger/wiredtiger_checksum',
        'client_metadata',
        'metadata',
        'rpc',
    ]
)

env.CppIntegrationTest(
    target='rpc_integration_test',
    source=[
        'op_msg_integration_test.cpp',
    ],
    LIBDEPS=[
        'protocol',
        '$BUILD_DIR/monger/client/clientdriver_network',
        '$BUILD_DIR/monger/transport/transport_layer_egress_init',
        '$BUILD_DIR/monger/util/version_impl',
    ],
)
