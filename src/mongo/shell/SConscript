# -*- mode: python; -*-

Import([
    'env',
    'get_option'
])

env = env.Clone()

env.Library(
    target='benchrun',
    source=[
        'bench.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/client/clientdriver_minimal',
        '$BUILD_DIR/monger/db/logical_session_id',
        '$BUILD_DIR/monger/scripting/bson_template_evaluator',
    ]
)

generateJSErrorCodes = env.Command(
    target=['error_codes.js'],
    source=[
        '$BUILD_DIR/monger/base/generate_error_codes.py',
        '$BUILD_DIR/monger/base/error_codes.err',
        'error_codes.tpl.js',
    ],
    action=['$PYTHON ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]}=${TARGETS[0]}'])
env.Alias('generated-sources', generateJSErrorCodes)

# Files added here need to be added in scripting/engine.cpp and buildscripts/vcxproj.header as well.
js_header = env.JSHeader(
    target="monger.cpp",
    source=[
        "assert.js",
        "bulk_api.js",
        "collection.js",
        "crud_api.js",
        "db.js",
        "error_codes.js",
        "explainable.js",
        "explain_query.js",
        "monger.js",
        "mr.js",
        "query.js",
        "session.js",
        "types.js",
        "utils_auth.js",
        "utils.js",
        "utils_sh.js",
    ]
)

env.Alias('generated-sources', js_header)

# Files added here need to be added in shell/shell_utils.cpp and buildscripts/vcxproj.header as
# well.
env.JSHeader(
    target="monger-server.cpp",
    source=[
        "servers.js",
        "shardingtest.js",
        "servers_misc.js",
        "replsettest.js",
        "bridge.js",
        "keyvault.js",
    ],
)

env.Alias('generated-sources', "monger-server.cpp")

env.Library(
    target='mongerjs',
    source=[
        'monger.cpp',
    ],
    LIBDEPS=[
        "$BUILD_DIR/monger/base",
    ],
)

env.Library(
    target='shell_options_storage',
    source=[
        'shell_options_storage.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/client/connection_string',
        '$BUILD_DIR/monger/util/cmdline_utils/cmdline_utils',
    ],
)

env.Library(
    target='shell_options_register',
    source=[
        env.Idlc('shell_options.idl')[0],
    ],
    LIBDEPS=[
        'shell_options_storage',
        '$BUILD_DIR/monger/base',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/util/options_parser/options_parser',
    ],
)

env.Library(
    target='shell_utils',
    source=[
        'monger-server.cpp',
        'shell_options.cpp',
        'shell_utils.cpp',
        'shell_utils_extended.cpp',
        'shell_utils_launcher.cpp',
    ],
    LIBDEPS=[
        'benchrun',
        '$BUILD_DIR/monger/base/environment_buffer',
        '$BUILD_DIR/monger/client/clientdriver_network',
        '$BUILD_DIR/monger/db/mongerhasher',
        '$BUILD_DIR/monger/db/traffic_reader',
        '$BUILD_DIR/monger/scripting/scripting',
        '$BUILD_DIR/monger/transport/message_compressor',
        '$BUILD_DIR/monger/util/password',
        'shell_options_storage',
    ]
)

kmsEnv = env.Clone()

kmsEnv.InjectThirdParty(libraries=['kms-message'])

kmsEnv.Library(
    target="kms",
    source=[
        "kms.cpp",
        "kms_aws.cpp",
        "kms_local.cpp",
        kmsEnv.Idlc("kms.idl")[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base/secure_allocator',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/crypto/aead_encryption',
        '$BUILD_DIR/monger/db/commands/test_commands_enabled',
        '$BUILD_DIR/monger/util/net/network',
        '$BUILD_DIR/monger/util/net/socket',
        '$BUILD_DIR/monger/util/net/ssl_manager',
        '$BUILD_DIR/monger/util/net/ssl_options',
        '$BUILD_DIR/third_party/shim_kms_message',
    ],
)

env.Library(
    target="kms_shell",
    source=[
        "kms_shell.cpp",
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/shell_core',
        'kms',
    ],
)

scriptingEnv = env.Clone()
scriptingEnv.InjectMozJS()

scriptingEnv.Library(
    target="encrypted_dbclient",
    source=[
        "encrypted_dbclient_base.cpp",
        scriptingEnv.Idlc("fle_shell_options.idl")[0],
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/crypto/aead_encryption',
        '$BUILD_DIR/monger/crypto/symmetric_crypto',
        '$BUILD_DIR/monger/client/clientdriver_minimal',
        '$BUILD_DIR/monger/scripting/scripting',
        '$BUILD_DIR/monger/shell/shell_options_register',
        '$BUILD_DIR/third_party/shim_mozjs',
        'kms',
    ],
)

env.CppUnitTest(
    target='shell_test',
    source=[
        'kms_test.cpp' if "tom" not in env["MONGO_CRYPTO"] else [],
        'shell_options_test.cpp',
        'shell_utils_test.cpp'
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/util/signal_handlers',
        'kms' if "tom" not in env["MONGO_CRYPTO"] else [],
        'shell_options_register',
        'shell_utils',
    ],
)
