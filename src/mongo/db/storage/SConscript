# -*- mode: python -*-
Import("env")

env = env.Clone()

env.SConscript(
    dirs=[
        'biggie',
        'devnull',
        'ephemeral_for_test',
        'kv',
        'mobile',
        'wiredtiger',
    ],
    exports=[
        'env'
    ],
)

env.Library(
    target='journal_listener',
    source=[
        'journal_listener.cpp',
        ],
    LIBDEPS=[
        ],
    )

env.Library(
    target='index_entry_comparison',
    source=[
        'index_entry_comparison.cpp',
        ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/namespace_string',
        'duplicate_key_error_info',
        ],
    )

env.Library(
    target='duplicate_key_error_info',
    source=[
        'duplicate_key_error_info.cpp',
        ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        ],
    )

env.Library(
    target='recovery_unit_base',
    source=[
        'recovery_unit.cpp',
        ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        ],
    )

env.Library(
    target='key_string',
    source=[
        'key_string.cpp',
        ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        ],
    )

env.Library(
    target='bson_collection_catalog_entry',
    source=[
        'bson_collection_catalog_entry.cpp',
        ],
    LIBDEPS=[
        '$BUILD_DIR/monger/db/catalog/collection_options',
        '$BUILD_DIR/monger/db/common',
        '$BUILD_DIR/monger/db/service_context',
        '$BUILD_DIR/monger/db/storage/kv/kv_prefix',
        ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/db/catalog/disable_index_spec_namespace_generation',
        ],
    )

env.Library(
    target='oplog_hack',
    source=[
        'oplog_hack.cpp',
        ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        ]
    )

env.Library(
    target='storage_options',
    source=[
        'storage_options.cpp',
        env.Idlc('storage_parameters.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/idl/server_parameter',
    ],
)

env.Library(
    target='encryption_hooks',
    source= [
        'encryption_hooks.cpp',
        ],
    LIBDEPS= ['$BUILD_DIR/monger/base',
              '$BUILD_DIR/monger/db/service_context'],
    PROGDEPS_DEPENDENTS=[
        '$BUILD_DIR/monger/mongerd',
        '$BUILD_DIR/monger/mongers',
        ],
    )

env.Library(
    target='backup_cursor_hooks',
    source=[
        'backup_cursor_hooks.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/service_context',
    ],
    PROGDEPS_DEPENDENTS=[
        '$BUILD_DIR/monger/mongerd',
    ],
)

env.Library(
    target='test_harness_helper',
    source=[
        'test_harness_helper.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/db/storage/storage_options',
        '$BUILD_DIR/monger/db/service_context',
        '$BUILD_DIR/monger/db/service_context_test_fixture',
    ],
)

env.Library(
    target='sorted_data_interface_test_harness',
    source=[
        'sorted_data_interface_test_bulkbuilder.cpp',
        'sorted_data_interface_test_cursor.cpp',
        'sorted_data_interface_test_cursor_advanceto.cpp',
        'sorted_data_interface_test_cursor_end_position.cpp',
        'sorted_data_interface_test_cursor_locate.cpp',
        'sorted_data_interface_test_cursor_saverestore.cpp',
        'sorted_data_interface_test_cursor_seek_exact.cpp',
        'sorted_data_interface_test_dupkeycheck.cpp',
        'sorted_data_interface_test_fullvalidate.cpp',
        'sorted_data_interface_test_harness.cpp',
        'sorted_data_interface_test_insert.cpp',
        'sorted_data_interface_test_isempty.cpp',
        'sorted_data_interface_test_rollback.cpp',
        'sorted_data_interface_test_spaceused.cpp',
        'sorted_data_interface_test_touch.cpp',
        'sorted_data_interface_test_unindex.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/db/storage/storage_options',
        '$BUILD_DIR/monger/db/service_context',
        '$BUILD_DIR/monger/unittest/unittest',
        'index_entry_comparison',
        'test_harness_helper',
    ],

)

env.Library(
    target='record_store_test_harness',
    source=[
        'record_store_test_capped_delete.cpp',
        'record_store_test_capped_visibility.cpp',
        'record_store_test_datafor.cpp',
        'record_store_test_datasize.cpp',
        'record_store_test_deleterecord.cpp',
        'record_store_test_harness.cpp',
        'record_store_test_insertrecord.cpp',
        'record_store_test_oplog.cpp',
        'record_store_test_randomiter.cpp',
        'record_store_test_recorditer.cpp',
        'record_store_test_recordstore.cpp',
        'record_store_test_repairiter.cpp',
        'record_store_test_storagesize.cpp',
        'record_store_test_touch.cpp',
        'record_store_test_truncate.cpp',
        'record_store_test_updaterecord.cpp',
        'record_store_test_updatewithdamages.cpp',
        ],
    LIBDEPS=[
        '$BUILD_DIR/monger/db/service_context',
        '$BUILD_DIR/monger/db/storage/storage_options',
        '$BUILD_DIR/monger/unittest/unittest',
        'test_harness_helper',
        ],
    )


env.Library(
    target='recovery_unit_test_harness',
    source=[
        'recovery_unit_test_harness.cpp'
        ],
    LIBDEPS=[
        '$BUILD_DIR/monger/unittest/unittest',
        'test_harness_helper',
        ],
    )

env.Library(
    target='storage_engine_lock_file',
    source=[
        'storage_engine_lock_file.cpp',
        'storage_engine_lock_file_${TARGET_OS_FAMILY}.cpp',
        ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/service_context',
        ],
    )

env.Library(
    target='storage_engine_common',
    source=[
        'storage_engine_init.cpp'
    ],
    LIBDEPS=[
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/db/service_context',
        '$BUILD_DIR/monger/db/concurrency/lock_manager',
        'storage_engine_lock_file',
        'storage_repair_observer',
        'storage_engine_metadata',
        'storage_options',
    ],
)

env.Library(
    target="storage_init_d",
    source=[
        "storage_init.cpp",
    ],
    LIBDEPS=[
        "storage_options",
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/db/commands/server_status',
        'backup_cursor_hooks'
    ]
)

env.Library(
    target="write_unit_of_work",
    source=[
        "write_unit_of_work.cpp",
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/monger/base",
        "$BUILD_DIR/monger/db/storage/storage_options",
        '$BUILD_DIR/monger/util/fail_point',
    ],
)

env.Library(
    target='storage_engine_metadata',
    source=[
        'storage_engine_metadata.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/server_options_core',
        '$BUILD_DIR/monger/db/bson/dotted_path_support',
    ],
)

env.Library(
    target='storage_file_util',
    source=[
        'storage_file_util.cpp',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/base',
    ],
)

env.Library(
    target='storage_repair_observer',
    source=[
        'storage_repair_observer.cpp',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/dbhelpers',
        '$BUILD_DIR/monger/db/service_context',
        '$BUILD_DIR/monger/db/repl/replica_set_messages',
        'storage_file_util',
    ],
)

env.Benchmark(
    target='storage_key_string_bm',
    source='key_string_bm.cpp',
    LIBDEPS=[
        'key_string',
        '$BUILD_DIR/monger/base',
    ],
)

env.Library(
    target='remove_saver',
    source=[
        'remove_saver.cpp',
    ],
    LIBDEPS=[
        'encryption_hooks',
        'storage_options',
        '$BUILD_DIR/monger/base',
    ]
)

env.Library(
    target='flow_control_parameters',
    source=[
        env.Idlc('flow_control_parameters.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/idl/server_parameter',
    ],
)

env.Library(
    target='flow_control',
    source=[
        'flow_control.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/db/commands/server_status',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/concurrency/flow_control_ticketholder',
        '$BUILD_DIR/monger/db/concurrency/lock_manager',
        '$BUILD_DIR/monger/db/server_options_core',
        '$BUILD_DIR/monger/db/service_context',
        '$BUILD_DIR/monger/util/background_job',
        '$BUILD_DIR/monger/util/fail_point',
        'flow_control_parameters',
    ],
)

env.CppUnitTest(
    target='db_storage_test',
    source=[
        'flow_control_test.cpp',
        'key_string_test.cpp',
        'storage_engine_lock_file_test.cpp',
        'storage_engine_metadata_test.cpp',
        'storage_repair_observer_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/auth/authmocks',
        '$BUILD_DIR/monger/db/concurrency/flow_control_ticketholder',
        '$BUILD_DIR/monger/db/dbhelpers',
        '$BUILD_DIR/monger/db/namespace_string',
        '$BUILD_DIR/monger/db/repl/replmocks',
        '$BUILD_DIR/monger/db/repl/topology_coordinator',
        '$BUILD_DIR/monger/db/service_context_d_test_fixture',
        '$BUILD_DIR/monger/db/storage/ephemeral_for_test/storage_ephemeral_for_test_core',
        '$BUILD_DIR/monger/executor/network_interface_factory',
        '$BUILD_DIR/monger/executor/network_interface_mock',
        'flow_control',
        'flow_control_parameters',
        'key_string',
        'storage_engine_lock_file',
        'storage_engine_metadata',
        'storage_repair_observer',
    ],
)

env.Library(
    target='durable_catalog_impl',
    source=[
        'durable_catalog_impl.cpp',
        'kv/kv_collection_catalog_entry.cpp', # TODO: SERVER-40717 Avoid source under kv sub-directory
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/bson/util/bson_extract',
        '$BUILD_DIR/monger/db/concurrency/lock_manager',
        '$BUILD_DIR/monger/db/index/index_descriptor',
        '$BUILD_DIR/monger/db/index_names',
        '$BUILD_DIR/monger/db/namespace_string',
        '$BUILD_DIR/monger/db/storage/bson_collection_catalog_entry',
        '$BUILD_DIR/monger/db/storage/kv/kv_drop_pending_ident_reaper',
        '$BUILD_DIR/monger/db/storage/kv/kv_prefix',
        '$BUILD_DIR/monger/db/catalog/collection_catalog',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/db/catalog/disable_index_spec_namespace_generation',
    ]
)

env.Library(
    target='storage_engine_impl',
    source=[
        'storage_engine_impl.cpp',
        'kv/temporary_kv_record_store.cpp', # TODO: SERVER-41892 Avoid source under kv sub-directory
    ],
    LIBDEPS=[
        '$BUILD_DIR/monger/base',
        '$BUILD_DIR/monger/db/catalog/catalog_control',
        '$BUILD_DIR/monger/db/server_options_core',
        '$BUILD_DIR/monger/db/storage/durable_catalog_impl',
        '$BUILD_DIR/monger/db/storage/kv/kv_drop_pending_ident_reaper',
        '$BUILD_DIR/monger/db/storage/storage_options',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/monger/db/logical_clock',
        '$BUILD_DIR/monger/db/storage/storage_repair_observer',
        '$BUILD_DIR/monger/db/catalog/collection_catalog_helper',
    ],
)

